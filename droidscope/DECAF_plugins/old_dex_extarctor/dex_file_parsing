
        raw_addr = reinterpret_cast<byte *>(dexfilezz) + 48 - 16;
        size_t *header__ = reinterpret_cast<size_t *>(raw_addr);
        art::DexFile::Header *headerzz;
        char header_block[SIZEOF_TYPE(art::DexFile::Header)];
        DECAF_read_mem_with_pgd(env, pgd_strip(cr3), *header__, header_block,
                                SIZEOF_TYPE(art::DexFile::Header));
        headerzz = (art::DexFile::Header *)header_block;
        
/*
        for(size_t class_def_index = 0; 
            class_def_index < headerzz->class_defs_size_; 
            ++class_def_index)
        {
          raw_addr = reinterpret_cast<byte*>(dexfilezz) + 48 + 8;
          uint32_t *class_defs__ = reinterpret_cast<uint32_t *>(raw_addr);
          art::DexFile::ClassDef *temp_class_defs__ = (art::DexFile::ClassDef *)(*class_defs__);
          temp_class_defs__ = temp_class_defs__ + class_def_index;

          art::DexFile::ClassDef *defzz;
          char dexblock[SIZEOF_TYPE(art::DexFile::ClassDef)];
          DECAF_read_mem_with_pgd(env, pgd_strip(cr3), (target_ulong)(uintptr_t)(temp_class_defs__), dexblock, SIZEOF_TYPE(art::DexFile::ClassDef));
          defzz = (art::DexFile::ClassDef *) dexblock;

          target_ulong base_addr = (target_ulong)(uintptr_t)begin_byte;
          target_ulong base_plus_offset = base_addr + defzz->class_data_off_;
          // Proceed getting the StringId
         raw_addr = reinterpret_cast<byte*>(dexfilezz) + 48 - 12;
         uint32_t *str_ids_decaf = reinterpret_cast<uint32_t *>(raw_addr);
         art::DexFile::StringId *temp_str_id = reinterpret_cast<art::DexFile::StringId *>(*str_ids_decaf);
         temp_str_id = temp_str_id + defzz->source_file_idx_;

         art::DexFile::StringId *str_idzz;
         char block6[SIZEOF_TYPE(art::DexFile::StringId)];
         DECAF_read_mem_with_pgd(env, pgd_strip(cr3), (target_ulong)(uintptr_t)temp_str_id, block6, SIZEOF_TYPE(art::DexFile::StringId));
         str_idzz = (art::DexFile::StringId *) block6;
        // We now have the StringId at str_idzz, PHEW!!

         target_ulong string_offset = base_addr + str_idzz->string_data_off_ + 1;

        //const char* name_chr_ptr = reinterpret_cast<const char*>(begin);
         char block7[200];
         DECAF_read_mem_with_pgd(env, pgd_strip(cr3), string_offset, block7, 200);
         block7[199] = '\0';

          if(defzz->class_data_off_ == 0)
          {
            continue;
          }


          hwaddr phys_ = safe_get_phys_page_debug(ENV_GET_CPU(env), base_plus_offset & TARGET_PAGE_MASK);
          void *phys_buf_ = NULL;
          if(phys_ != -1)
          {
           phys_buf_ = (uint8_t *)qemu_get_ram_ptr(phys_) + (base_plus_offset - (base_plus_offset & TARGET_PAGE_MASK));
          }
          
          if(phys_ != -1)
          {
            fprintf(log_fd_jumps, "class_data_off_ %" PRIu32 " class src name %s\n", defzz->class_data_off_, block7); 
            if(phys_buf_)
            {
              print_hex((uint8_t *)phys_buf_, 8);
            }
            art::ClassDataItemIterator it(*dexfilezz, (uint8_t*)(phys_buf_));

            //Iterate over all the methods using the ClassDataItemIterator
            
            fprintf(log_fd_jumps, "NumStaticFields %u NumInstanceFields %u \n", it.NumStaticFields(), it.NumInstanceFields());
          }
          else
          {
            continue;
          } 
        }

        fprintf(log_fd_jumps, "done \n", (dirty_module) ? (dirty_module->name) : ("invalid"));
      }
    }
  }
*/
#if 0
        raw_addr = reinterpret_cast<byte *>(dexfilezz) + 48 - 16 - 8;
        uint32_t *checksum__ = reinterpret_cast<uint32_t *>(raw_addr);
        int index = -1;
        if(base_to_oat_file.count(base)) {
          art::OatFile *oat_file = base_to_oat_file[base];
          const std::vector<const art::OatFile::OatDexFile *> oat_dex_files_ =
            oat_file->GetOatDexFiles();

          for (size_t i = 0; i < oat_dex_files_.size(); i++) {
            if(oat_dex_files_[i]->GetDexFileLocationChecksum() == *checksum__)
            {
              index = i;
              break;
            }
          }

          if(index != -1)
          { 
            std::string error_msg;
            std::unique_ptr<const art::DexFile> dex_file(
                oat_dex_files_[index]->OpenDexFile(&error_msg));
            if (dex_file.get() != nullptr) {
             fprintf(log_fd_jumps, "<DoCall> Java function call - %s \n", art::PrettyMethod(*dex_method_id, *(dex_file.get()), true).c_str());
             fflush(log_fd_jumps);
            }
          }
        }
#endif
